// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package services_user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserReq struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Appid                string   `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserReq) Reset()         { *m = UserReq{} }
func (m *UserReq) String() string { return proto.CompactTextString(m) }
func (*UserReq) ProtoMessage()    {}
func (*UserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *UserReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReq.Unmarshal(m, b)
}
func (m *UserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReq.Marshal(b, m, deterministic)
}
func (m *UserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReq.Merge(m, src)
}
func (m *UserReq) XXX_Size() int {
	return xxx_messageInfo_UserReq.Size(m)
}
func (m *UserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserReq proto.InternalMessageInfo

func (m *UserReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UserReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type UpdatePasswordReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	NewPassword          string   `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	Appid                string   `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePasswordReq) Reset()         { *m = UpdatePasswordReq{} }
func (m *UpdatePasswordReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePasswordReq) ProtoMessage()    {}
func (*UpdatePasswordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *UpdatePasswordReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePasswordReq.Unmarshal(m, b)
}
func (m *UpdatePasswordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePasswordReq.Marshal(b, m, deterministic)
}
func (m *UpdatePasswordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePasswordReq.Merge(m, src)
}
func (m *UpdatePasswordReq) XXX_Size() int {
	return xxx_messageInfo_UpdatePasswordReq.Size(m)
}
func (m *UpdatePasswordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePasswordReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePasswordReq proto.InternalMessageInfo

func (m *UpdatePasswordReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UpdatePasswordReq) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *UpdatePasswordReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type BrandTokenReq struct {
	BrandToken           string   `protobuf:"bytes,1,opt,name=brand_token,json=brandToken,proto3" json:"brand_token,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Module               string   `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandTokenReq) Reset()         { *m = BrandTokenReq{} }
func (m *BrandTokenReq) String() string { return proto.CompactTextString(m) }
func (*BrandTokenReq) ProtoMessage()    {}
func (*BrandTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}

func (m *BrandTokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrandTokenReq.Unmarshal(m, b)
}
func (m *BrandTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrandTokenReq.Marshal(b, m, deterministic)
}
func (m *BrandTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandTokenReq.Merge(m, src)
}
func (m *BrandTokenReq) XXX_Size() int {
	return xxx_messageInfo_BrandTokenReq.Size(m)
}
func (m *BrandTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_BrandTokenReq proto.InternalMessageInfo

func (m *BrandTokenReq) GetBrandToken() string {
	if m != nil {
		return m.BrandToken
	}
	return ""
}

func (m *BrandTokenReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BrandTokenReq) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

type UserInfo struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mobile               string   `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Nickname             string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar               string   `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Status               uint32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Token                string   `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	RegisterAt           string   `protobuf:"bytes,8,opt,name=register_at,json=registerAt,proto3" json:"register_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserInfo) GetRegisterAt() string {
	if m != nil {
		return m.RegisterAt
	}
	return ""
}

type TokenReq struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Appid                string   `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenReq) Reset()         { *m = TokenReq{} }
func (m *TokenReq) String() string { return proto.CompactTextString(m) }
func (*TokenReq) ProtoMessage()    {}
func (*TokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{4}
}

func (m *TokenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenReq.Unmarshal(m, b)
}
func (m *TokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenReq.Marshal(b, m, deterministic)
}
func (m *TokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenReq.Merge(m, src)
}
func (m *TokenReq) XXX_Size() int {
	return xxx_messageInfo_TokenReq.Size(m)
}
func (m *TokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_TokenReq proto.InternalMessageInfo

func (m *TokenReq) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TokenReq) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type TokenInfo struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{5}
}

func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfo.Unmarshal(m, b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return xxx_messageInfo_TokenInfo.Size(m)
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*UserReq)(nil), "services.user.UserReq")
	proto.RegisterType((*UpdatePasswordReq)(nil), "services.user.UpdatePasswordReq")
	proto.RegisterType((*BrandTokenReq)(nil), "services.user.BrandTokenReq")
	proto.RegisterType((*UserInfo)(nil), "services.user.UserInfo")
	proto.RegisterType((*TokenReq)(nil), "services.user.TokenReq")
	proto.RegisterType((*TokenInfo)(nil), "services.user.TokenInfo")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x49, 0xb6, 0x76, 0xe9, 0xcb, 0x82, 0xc0, 0x8c, 0x11, 0x4d, 0x48, 0xeb, 0x72, 0xda,
	0x29, 0x87, 0xf1, 0x01, 0xd0, 0xd2, 0x43, 0xc5, 0x05, 0xa1, 0xd0, 0x9e, 0x8b, 0x13, 0x1b, 0x64,
	0x95, 0xc6, 0xc1, 0x76, 0x5a, 0xf5, 0x23, 0xf2, 0x99, 0xb8, 0x20, 0xdb, 0xa9, 0x9b, 0x46, 0xa1,
	0x07, 0x6e, 0xfe, 0xbf, 0xf8, 0xfd, 0x9e, 0xdf, 0xbf, 0xff, 0x02, 0x34, 0x92, 0x8a, 0xb4, 0x16,
	0x5c, 0x71, 0x14, 0x49, 0x2a, 0xb6, 0xac, 0xa4, 0x32, 0xd5, 0xc5, 0x64, 0x06, 0x57, 0x4b, 0x49,
	0x45, 0x4e, 0x7f, 0xa1, 0x97, 0xe0, 0x33, 0x12, 0x7b, 0x53, 0xef, 0x31, 0xca, 0x7d, 0x46, 0x10,
	0x82, 0xcb, 0x92, 0x13, 0x1a, 0xfb, 0x53, 0xef, 0x71, 0x92, 0x9b, 0x33, 0xba, 0x81, 0x11, 0xae,
	0x6b, 0x46, 0xe2, 0x0b, 0x53, 0xb4, 0x22, 0x29, 0xe0, 0xf5, 0xb2, 0x26, 0x58, 0xd1, 0x2f, 0x58,
	0xca, 0x1d, 0x17, 0x44, 0xe3, 0x6e, 0x60, 0xa4, 0xf8, 0x9a, 0x56, 0x86, 0x38, 0xc9, 0xad, 0x40,
	0x0f, 0x70, 0x5d, 0xd1, 0xdd, 0xaa, 0x6e, 0x2f, 0xb6, 0xf0, 0xb0, 0xa2, 0xbb, 0x43, 0xef, 0x3f,
	0x66, 0x7c, 0x83, 0x28, 0x13, 0xb8, 0x22, 0x0b, 0x8d, 0xd1, 0xfc, 0x7b, 0x08, 0x0b, 0x5d, 0x58,
	0x75, 0xa7, 0x40, 0xe1, 0xee, 0xa0, 0x5b, 0x18, 0x4b, 0xde, 0x88, 0xf2, 0xb0, 0x41, 0xab, 0x74,
	0x7d, 0xc3, 0x49, 0xf3, 0x93, 0xb6, 0x03, 0x5a, 0x95, 0xfc, 0xf6, 0x20, 0xd0, 0x5e, 0x7c, 0xaa,
	0xbe, 0xf3, 0x21, 0x33, 0x2a, 0xbc, 0x71, 0x66, 0xe8, 0xb3, 0x05, 0x15, 0xac, 0x0b, 0xd2, 0x0a,
	0xdd, 0x41, 0x50, 0xb1, 0x72, 0x6d, 0xee, 0x5f, 0x9a, 0x2f, 0x4e, 0xeb, 0x1e, 0xbc, 0xc5, 0x0a,
	0x8b, 0x78, 0x64, 0x7b, 0xac, 0x32, 0x8f, 0x55, 0x58, 0x35, 0x32, 0x1e, 0x9b, 0x99, 0xad, 0x3a,
	0xba, 0x78, 0xd5, 0x75, 0xf1, 0x1e, 0x42, 0x41, 0x7f, 0x30, 0xa9, 0xa8, 0x58, 0x61, 0x15, 0x07,
	0x76, 0xf7, 0x43, 0xe9, 0x59, 0x25, 0x4f, 0x10, 0x38, 0xa3, 0x5e, 0xc1, 0x45, 0xe3, 0x76, 0xd1,
	0xc7, 0xa3, 0xc3, 0x7e, 0xd7, 0xe1, 0x07, 0x98, 0x98, 0x1e, 0xb3, 0xff, 0xe0, 0xaf, 0xf7, 0xf4,
	0xc7, 0x87, 0x50, 0x5b, 0xf4, 0xd5, 0x66, 0x08, 0x3d, 0xc3, 0xf5, 0x9c, 0x2a, 0x5d, 0xc9, 0xf6,
	0x4b, 0x46, 0xd0, 0x6d, 0x7a, 0x92, 0xae, 0xb4, 0x8d, 0xd6, 0xdd, 0xbb, 0x81, 0xba, 0x1e, 0x93,
	0xbc, 0x40, 0x19, 0x44, 0x0e, 0x31, 0xd3, 0x11, 0xfb, 0x0f, 0xc6, 0x67, 0x78, 0xe3, 0x18, 0xc7,
	0x90, 0xa0, 0xf7, 0xbd, 0x8e, 0x93, 0xfc, 0x9c, 0xe3, 0x2d, 0xe0, 0xed, 0x69, 0x9e, 0xb3, 0xbd,
	0x25, 0x4e, 0xfb, 0x3d, 0xfd, 0xd4, 0x9f, 0xa3, 0x7e, 0x84, 0x60, 0x4e, 0x95, 0x05, 0xf5, 0xaf,
	0xb9, 0x57, 0xc5, 0x43, 0x1f, 0x2c, 0xa0, 0x18, 0x9b, 0x7f, 0xf0, 0x87, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x25, 0x36, 0x27, 0x72, 0xcf, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserByUid(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserByCode(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserByBrandToken(ctx context.Context, in *BrandTokenReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 更新密码(通过token)
	UpdatePasswordByToken(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 获取token
	GetToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenInfo, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserByUid(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/services.user.UserService/GetUserByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByCode(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/services.user.UserService/GetUserByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByBrandToken(ctx context.Context, in *BrandTokenReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/services.user.UserService/GetUserByBrandToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePasswordByToken(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/services.user.UserService/UpdatePasswordByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/services.user.UserService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetUserByUid(context.Context, *UserReq) (*UserInfo, error)
	GetUserByCode(context.Context, *UserReq) (*UserInfo, error)
	GetUserByBrandToken(context.Context, *BrandTokenReq) (*UserInfo, error)
	// 更新密码(通过token)
	UpdatePasswordByToken(context.Context, *UpdatePasswordReq) (*UserInfo, error)
	// 获取token
	GetToken(context.Context, *TokenReq) (*TokenInfo, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUserByUid(ctx context.Context, req *UserReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUid not implemented")
}
func (*UnimplementedUserServiceServer) GetUserByCode(ctx context.Context, req *UserReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByCode not implemented")
}
func (*UnimplementedUserServiceServer) GetUserByBrandToken(ctx context.Context, req *BrandTokenReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByBrandToken not implemented")
}
func (*UnimplementedUserServiceServer) UpdatePasswordByToken(ctx context.Context, req *UpdatePasswordReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordByToken not implemented")
}
func (*UnimplementedUserServiceServer) GetToken(ctx context.Context, req *TokenReq) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUserByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.user.UserService/GetUserByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByUid(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.user.UserService/GetUserByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByCode(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByBrandToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByBrandToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.user.UserService/GetUserByBrandToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByBrandToken(ctx, req.(*BrandTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePasswordByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePasswordByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.user.UserService/UpdatePasswordByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePasswordByToken(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.user.UserService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetToken(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUid",
			Handler:    _UserService_GetUserByUid_Handler,
		},
		{
			MethodName: "GetUserByCode",
			Handler:    _UserService_GetUserByCode_Handler,
		},
		{
			MethodName: "GetUserByBrandToken",
			Handler:    _UserService_GetUserByBrandToken_Handler,
		},
		{
			MethodName: "UpdatePasswordByToken",
			Handler:    _UserService_UpdatePasswordByToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _UserService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
